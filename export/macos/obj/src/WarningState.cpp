// Generated by Haxe 5.0.0-alpha.1+f12335f
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_WarningState
#include <WarningState.h>
#endif
#ifndef INCLUDED_WiiMenuMain
#include <WiiMenuMain.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_632c0a2e709a3202_7_new,"WarningState","new",0x3c03a9a7,"WarningState.new","WarningState.hx",7,0x489787a9)
HX_LOCAL_STACK_FRAME(_hx_pos_632c0a2e709a3202_13_create,"WarningState","create",0x15fb5415,"WarningState.create","WarningState.hx",13,0x489787a9)
HX_LOCAL_STACK_FRAME(_hx_pos_632c0a2e709a3202_33_update,"WarningState","update",0x20f17322,"WarningState.update","WarningState.hx",33,0x489787a9)
static const int _hx_array_data_0b1e4a35_3[] = {
	(int)65,(int)90,
};
HX_LOCAL_STACK_FRAME(_hx_pos_632c0a2e709a3202_49_update,"WarningState","update",0x20f17322,"WarningState.update","WarningState.hx",49,0x489787a9)

void WarningState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_632c0a2e709a3202_7_new)
HXLINE(  10)		this->alphaDir = -1;
HXLINE(   9)		this->alpha = ((Float)1);
HXLINE(   7)		super::__construct(MaxSize);
            	}

Dynamic WarningState_obj::__CreateEmpty() { return new WarningState_obj; }

void *WarningState_obj::_hx_vtable = 0;

Dynamic WarningState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WarningState_obj > _hx_result = new WarningState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool WarningState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x264a0459) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x264a0459;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void WarningState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_632c0a2e709a3202_13_create)
HXLINE(  14)		this->set_bgColor(5);
HXLINE(  16)		this->super::create();
HXLINE(  18)		 ::flixel::FlxSprite warnText =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  19)		warnText->loadGraphic(HX_("assets/images/HealthAndSafety/WarningUSA.png",2f,44,3c,27),null(),null(),null(),null(),null());
HXLINE(  20)		{
HXLINE(  20)			int axes = 17;
HXDLIN(  20)			bool _hx_tmp;
HXDLIN(  20)			if ((axes != 1)) {
HXLINE(  20)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  20)				_hx_tmp = true;
            			}
HXDLIN(  20)			if (_hx_tmp) {
HXLINE(  20)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  20)				warnText->set_x(((( (Float)(_hx_tmp1) ) - warnText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  20)			bool _hx_tmp2;
HXDLIN(  20)			if ((axes != 16)) {
HXLINE(  20)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  20)				_hx_tmp2 = true;
            			}
HXDLIN(  20)			if (_hx_tmp2) {
HXLINE(  20)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  20)				warnText->set_y(((( (Float)(_hx_tmp3) ) - warnText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  21)		::haxe::Log_obj::trace(HX_("Add Health and Safety Warning.",32,05,0b,19),::hx::SourceInfo(HX_("source/WarningState.hx",35,6b,95,e5),21,HX_("WarningState",35,4a,1e,0b),HX_("create",fc,66,0f,7c)));
HXLINE(  22)		this->add(warnText);
HXLINE(  24)		 ::flixel::FlxSprite buttonPrompt =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  25)		buttonPrompt->loadGraphic(HX_("assets/images/HealthAndSafety/ButtonPrompt.png",de,e6,c6,2d),null(),null(),null(),null(),null());
HXLINE(  26)		{
HXLINE(  26)			int axes1 = 1;
HXDLIN(  26)			bool _hx_tmp4;
HXDLIN(  26)			if ((axes1 != 1)) {
HXLINE(  26)				_hx_tmp4 = (axes1 == 17);
            			}
            			else {
HXLINE(  26)				_hx_tmp4 = true;
            			}
HXDLIN(  26)			if (_hx_tmp4) {
HXLINE(  26)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(  26)				buttonPrompt->set_x(((( (Float)(_hx_tmp5) ) - buttonPrompt->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  26)			bool _hx_tmp6;
HXDLIN(  26)			if ((axes1 != 16)) {
HXLINE(  26)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE(  26)				_hx_tmp6 = true;
            			}
HXDLIN(  26)			if (_hx_tmp6) {
HXLINE(  26)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(  26)				buttonPrompt->set_y(((( (Float)(_hx_tmp7) ) - buttonPrompt->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  27)		buttonPrompt->set_y(( (Float)((::flixel::FlxG_obj::height - 88)) ));
HXLINE(  28)		::haxe::Log_obj::trace(HX_("Add Button Prompt (Press A to continue.)",b0,21,f6,55),::hx::SourceInfo(HX_("source/WarningState.hx",35,6b,95,e5),28,HX_("WarningState",35,4a,1e,0b),HX_("create",fc,66,0f,7c)));
HXLINE(  29)		this->add(buttonPrompt);
            	}


void WarningState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_632c0a2e709a3202_33_update)
HXLINE(  34)		this->super::update(elapsed);
HXLINE(  36)		 ::WarningState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  36)		_hx_tmp->alpha = (_hx_tmp->alpha + (((Float)0.02) * ( (Float)(this->alphaDir) )));
HXLINE(  38)		if ((this->alpha > 1)) {
HXLINE(  39)			this->alphaDir = -1;
            		}
            		else {
HXLINE(  40)			if ((this->alpha < 0)) {
HXLINE(  41)				this->alphaDir = 1;
            			}
            		}
HXLINE(  44)		::flixel::FlxG_obj::autoPause = false;
HXLINE(  47)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_0b1e4a35_3,2),1)) {
HXLINE(  49)			{
HXLINE(  49)				 ::flixel::FlxState nextState =  ::WiiMenuMain_obj::__alloc( HX_CTX ,null());
HXDLIN(  49)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  49)				 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(::flixel::FlxG_obj::game->_state,HX_("switchTo",8f,f8,d6,0d));
HXDLIN(  49)				if (( (bool)(_hx_tmp1(nextState)) )) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxState,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_632c0a2e709a3202_49_update)
HXLINE(  49)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  49)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            						else {
HXLINE(  49)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  49)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            				}
            			}
HXLINE(  50)			::haxe::Log_obj::trace(HX_("Opening Wii Menu.",be,31,76,53),::hx::SourceInfo(HX_("source/WarningState.hx",35,6b,95,e5),50,HX_("WarningState",35,4a,1e,0b),HX_("update",09,86,05,87)));
            		}
            	}



::hx::ObjectPtr< WarningState_obj > WarningState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< WarningState_obj > __this = new WarningState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< WarningState_obj > WarningState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	WarningState_obj *__this = (WarningState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WarningState_obj), true, "WarningState"));
	*(void **)__this = WarningState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

WarningState_obj::WarningState_obj()
{
}

::hx::Val WarningState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { return ::hx::Val( alpha ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"alphaDir") ) { return ::hx::Val( alphaDir ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val WarningState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"alphaDir") ) { alphaDir=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WarningState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("alpha",5e,a7,96,21));
	outFields->push(HX_("alphaDir",8f,bc,21,21));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WarningState_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(WarningState_obj,alpha),HX_("alpha",5e,a7,96,21)},
	{::hx::fsInt,(int)offsetof(WarningState_obj,alphaDir),HX_("alphaDir",8f,bc,21,21)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *WarningState_obj_sStaticStorageInfo = 0;
#endif

static ::String WarningState_obj_sMemberFields[] = {
	HX_("alpha",5e,a7,96,21),
	HX_("alphaDir",8f,bc,21,21),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class WarningState_obj::__mClass;

void WarningState_obj::__register()
{
	WarningState_obj _hx_dummy;
	WarningState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("WarningState",35,4a,1e,0b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WarningState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WarningState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WarningState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WarningState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

